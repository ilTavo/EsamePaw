{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.filteredRowsSet);\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [...filterItemsWithValue, {\n          columnField: targetColumnField\n        }];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback(model => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, updateFilteredRows);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"names":["_extends","React","GridEvents","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$componentsProp2","logger","current","unstable_updateControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","filterModelChange","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","filteredRowsSet","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","value","undefined","newFilterItems","filterItemOnTarget","find","columnField","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","model","currentModel","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","filterModelToExport","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","rowsSet","rowExpansionChange","columnsChange","activeStrategyProcessorChange","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.filteredRowsSet);\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [...filterItemsWithValue, {\n          columnField: targetColumnField\n        }];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback(model => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, updateFilteredRows);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"]},"metadata":{},"sourceType":"module"}