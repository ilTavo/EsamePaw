{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const setCellFocus = React.useCallback((id, field) => {\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && focusedCell.field === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.cellFocusIn, apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseUp = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      const updatedRow = apiRef.current.getRow(cell.id);\n\n      if (!updatedRow) {\n        apiRef.current.setState(state => _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        }));\n      }\n    }\n  }, [apiRef, props.rows]);\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderBlur, handleBlur);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseUp, handleCellMouseUp);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.cellModeChange, handleCellModeChange);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderFocus, handleColumnHeaderFocus);\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"names":["_extends","React","ownerDocument","GridEvents","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","setCellFocus","useCallback","id","field","current","getRow","focusedCell","setState","debug","forceUpdate","publishEvent","cellFocusIn","getCellParams","setColumnHeaderFocus","event","cellFocusOut","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleBlur","handleCellMouseUp","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","unstable_moveFocusToRelativeCell","useEffect","updatedRow","doc","rootElementRef","addEventListener","removeEventListener","columnHeaderBlur","cellDoubleClick","cellMouseUp","cellKeyDown","cellModeChange","columnHeaderFocus"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const setCellFocus = React.useCallback((id, field) => {\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && focusedCell.field === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent(GridEvents.cellFocusIn, apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseUp = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    } // The row might have been deleted during the click\n\n\n    if (!apiRef.current.getRow(focusedCell.id)) {\n      return;\n    } // There's a focused cell but another cell was clicked\n    // Publishes an event to notify that the focus was lost\n\n\n    apiRef.current.publishEvent(GridEvents.cellFocusOut, apiRef.current.getCellParams(focusedCell.id, focusedCell.field), event);\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      const updatedRow = apiRef.current.getRow(cell.id);\n\n      if (!updatedRow) {\n        apiRef.current.setState(state => _extends({}, state, {\n          focus: {\n            cell: null,\n            columnHeader: null\n          }\n        }));\n      }\n    }\n  }, [apiRef, props.rows]);\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderBlur, handleBlur);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseUp, handleCellMouseUp);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.cellModeChange, handleCellModeChange);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderFocus, handleColumnHeaderFocus);\n};"]},"metadata":{},"sourceType":"module"}