{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startRowEditMode({\n      id,\n      fieldToFocus: field\n    });\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field: field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus\n    } = params;\n    throwIfNotInMode(id, GridRowModes.View);\n\n    if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n      throw new Error(`MUI: The cell with id=${id} is already in edit mode.`);\n    }\n\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      acc[field] = {\n        value: apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, GridRowModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteRowState(id, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","React","useGridApiEventHandler","useGridApiOptionHandler","GridEvents","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","focusTimeout","useRef","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","runIfEditModeIsRow","callback","args","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","rowEditStart","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","rowFocusOut","rowEditStop","useEffect","clearTimeout","handleCellKeyDown","cellMode","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditMode","fieldToFocus","setEditCellValue","value","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","cellFocusIn","cellFocusOut","cellKeyDown","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateOrDeleteRowState","newProps","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","reduce","acc","cellParams","getCellValue","error","setCellFocus","focusedField","updateFocusedCellIfNeeded","unstable_moveFocusToRelativeCell","row","getRow","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","valueSetter","editingApi","unstable_setRowEditingEditCellValue"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startRowEditMode({\n      id,\n      fieldToFocus: field\n    });\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field: field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus\n    } = params;\n    throwIfNotInMode(id, GridRowModes.View);\n\n    if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n      throw new Error(`MUI: The cell with id=${id} is already in edit mode.`);\n    }\n\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      acc[field] = {\n        value: apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, GridRowModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteRowState(id, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};"]},"metadata":{},"sourceType":"module"}