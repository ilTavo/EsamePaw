{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight,\n    getRowSpacing\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const hydrateRowsMeta = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const positions = [];\n      const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      const currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);\n      const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n        positions.push(acc);\n        let baseRowHeight;\n        const isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;\n\n        if (isResized) {\n          // do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = rowsHeightLookup.current[row.id].value;\n        } else {\n          baseRowHeight = currentRowHeight;\n\n          if (getRowHeight) {\n            var _getRowHeight; // Default back to base rowHeight if getRowHeight returns null or undefined.\n\n\n            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {\n              densityFactor\n            }))) != null ? _getRowHeight : currentRowHeight;\n          }\n        } // We use an object to make simple to check if a height is already added or not\n\n\n        const initialHeights = {\n          base: baseRowHeight\n        };\n\n        if (getRowSpacing) {\n          var _spacing$top, _spacing$bottom;\n\n          const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n          const spacing = getRowSpacing(_extends({}, row, {\n            isFirstVisible: indexRelativeToCurrentPage === 0,\n            isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n            indexRelativeToCurrentPage\n          }));\n          initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n          initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n        }\n\n        const sizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n        const finalRowHeight = Object.values(sizes).reduce((acc2, value) => acc2 + value, 0);\n        rowsHeightLookup.current[row.id] = {\n          value: baseRowHeight,\n          sizes,\n          isResized\n        };\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, getRowSpacing, getRowHeight]);\n\n  const getTargetRowHeight = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;\n  };\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur2;\n\n    return (_rowsHeightLookup$cur2 = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur2.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id] = {\n      value: height,\n      isResized: true,\n      sizes: _extends({}, rowsHeightLookup.current[id].sizes, {\n        base: height\n      })\n    };\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getTargetRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"names":["_extends","React","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","useGridRegisterPipeApplier","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","useGridRowsMeta","apiRef","props","getRowHeight","getRowSpacing","rowsHeightLookup","useRef","rowHeight","filterState","paginationState","sortingState","currentPage","hydrateRowsMeta","useCallback","current","setState","densityFactor","instanceId","currentRowHeight","rows","reduce","acc","row","push","baseRowHeight","isResized","id","value","_getRowHeight","initialHeights","base","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","length","spacingTop","top","spacingBottom","bottom","sizes","unstable_applyPipeProcessors","finalRowHeight","Object","values","acc2","forceUpdate","getTargetRowHeight","rowId","_rowsHeightLookup$cur","getRowInternalSizes","_rowsHeightLookup$cur2","setRowHeight","height","useEffect","rowsMetaApi","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight,\n    getRowSpacing\n  } = props;\n  const rowsHeightLookup = React.useRef({});\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const hydrateRowsMeta = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const positions = [];\n      const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      const currentRowHeight = gridDensityRowHeightSelector(state, apiRef.current.instanceId);\n      const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n        positions.push(acc);\n        let baseRowHeight;\n        const isResized = rowsHeightLookup.current[row.id] && rowsHeightLookup.current[row.id].isResized || false;\n\n        if (isResized) {\n          // do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = rowsHeightLookup.current[row.id].value;\n        } else {\n          baseRowHeight = currentRowHeight;\n\n          if (getRowHeight) {\n            var _getRowHeight;\n\n            // Default back to base rowHeight if getRowHeight returns null or undefined.\n            baseRowHeight = (_getRowHeight = getRowHeight(_extends({}, row, {\n              densityFactor\n            }))) != null ? _getRowHeight : currentRowHeight;\n          }\n        } // We use an object to make simple to check if a height is already added or not\n\n\n        const initialHeights = {\n          base: baseRowHeight\n        };\n\n        if (getRowSpacing) {\n          var _spacing$top, _spacing$bottom;\n\n          const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n          const spacing = getRowSpacing(_extends({}, row, {\n            isFirstVisible: indexRelativeToCurrentPage === 0,\n            isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n            indexRelativeToCurrentPage\n          }));\n          initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n          initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n        }\n\n        const sizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n        const finalRowHeight = Object.values(sizes).reduce((acc2, value) => acc2 + value, 0);\n        rowsHeightLookup.current[row.id] = {\n          value: baseRowHeight,\n          sizes,\n          isResized\n        };\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, getRowSpacing, getRowHeight]);\n\n  const getTargetRowHeight = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return ((_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.value) || rowHeight;\n  };\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur2;\n\n    return (_rowsHeightLookup$cur2 = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur2.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id] = {\n      value: height,\n      isResized: true,\n      sizes: _extends({}, rowsHeightLookup.current[id].sizes, {\n        base: height\n      })\n    };\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeight, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getRowHeight: getTargetRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};"]},"metadata":{},"sourceType":"module"}