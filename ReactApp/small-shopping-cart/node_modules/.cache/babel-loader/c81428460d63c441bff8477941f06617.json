{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { GridRootStyles } from './GridRootStyles';\nimport { gridVisibleColumnDefinitionsSelector } from '../../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { gridRowCountSelector } from '../../hooks/features/rows/gridRowsSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridRoot = /*#__PURE__*/React.forwardRef(function GridRoot(props, ref) {\n  var _rootProps$classes;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    children,\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const rootContainerRef = React.useRef(null);\n  const handleRef = useForkRef(rootContainerRef, ref);\n  apiRef.current.rootElementRef = rootContainerRef; // Our implementation of <NoSsr />\n\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    setMountedState(true);\n  }, []);\n  useEnhancedEffect(() => {\n    if (mountedState) {\n      apiRef.current.unstable_updateGridDimensionsRef();\n    }\n  }, [apiRef, mountedState]);\n\n  if (!mountedState) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(GridRootStyles, _extends({\n    ref: handleRef,\n    className: clsx(className, (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes.root, gridClasses.root, rootProps.autoHeight && gridClasses.autoHeight),\n    role: \"grid\",\n    \"aria-colcount\": visibleColumns.length,\n    \"aria-rowcount\": totalRowCount,\n    \"aria-multiselectable\": !rootProps.disableMultipleSelection,\n    \"aria-label\": rootProps['aria-label'],\n    \"aria-labelledby\": rootProps['aria-labelledby']\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRoot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport { GridRoot };","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/components/containers/GridRoot.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","GridRootStyles","gridVisibleColumnDefinitionsSelector","useGridSelector","useGridApiContext","useGridRootProps","gridClasses","gridRowCountSelector","jsx","_jsx","GridRoot","forwardRef","props","ref","_rootProps$classes","rootProps","children","className","other","apiRef","visibleColumns","totalRowCount","rootContainerRef","useRef","handleRef","current","rootElementRef","mountedState","setMountedState","useState","unstable_updateGridDimensionsRef","classes","root","autoHeight","role","length","disableMultipleSelection","process","env","NODE_ENV","propTypes","sx","oneOfType","arrayOf","func","object","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { GridRootStyles } from './GridRootStyles';\nimport { gridVisibleColumnDefinitionsSelector } from '../../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { gridRowCountSelector } from '../../hooks/features/rows/gridRowsSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridRoot = /*#__PURE__*/React.forwardRef(function GridRoot(props, ref) {\n  var _rootProps$classes;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    children,\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const rootContainerRef = React.useRef(null);\n  const handleRef = useForkRef(rootContainerRef, ref);\n  apiRef.current.rootElementRef = rootContainerRef; // Our implementation of <NoSsr />\n\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    setMountedState(true);\n  }, []);\n  useEnhancedEffect(() => {\n    if (mountedState) {\n      apiRef.current.unstable_updateGridDimensionsRef();\n    }\n  }, [apiRef, mountedState]);\n\n  if (!mountedState) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(GridRootStyles, _extends({\n    ref: handleRef,\n    className: clsx(className, (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes.root, gridClasses.root, rootProps.autoHeight && gridClasses.autoHeight),\n    role: \"grid\",\n    \"aria-colcount\": visibleColumns.length,\n    \"aria-rowcount\": totalRowCount,\n    \"aria-multiselectable\": !rootProps.disableMultipleSelection,\n    \"aria-label\": rootProps['aria-label'],\n    \"aria-labelledby\": rootProps['aria-labelledby']\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRoot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport { GridRoot };"]},"metadata":{},"sourceType":"module"}