{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { isEnterKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { gridRowIdsSelector, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const sortingStateInitializer = (state, props) => {\n  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;\n\n  const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\n\nexport const useGridSorting = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: GridEvents.sortModelChange\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n\n    if (existingIdx > -1) {\n      if (!sortItem) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    var _col$sortingOrder2;\n\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n\n    if (existing) {\n      var _col$sortingOrder;\n\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort == null ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  /**\n   * API METHODS\n   */\n\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === GridFeatureModeConstant.server) {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: gridRowIdsSelector(state, apiRef.current.instanceId)\n          })\n        });\n      }\n\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.unstable_applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.sortedRowsSet);\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((column, direction, allowMultipleSorting) => {\n    if (!column.sortable) {\n      return;\n    }\n\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = !sortItem ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndex = React.useCallback(id => apiRef.current.getSortedRowIds().indexOf(id), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIndex,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'GridSortApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const sortModelToExport = gridSortModelSelector(apiRef);\n\n    if (sortModelToExport.length === 0) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;\n\n    if (sortModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    if (!params.sortRowList) {\n      return gridRowIdsSelector(apiRef);\n    }\n\n    const rowTree = gridRowTreeSelector(apiRef);\n    return params.sortRowList(Object.values(rowTree));\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnHeaderClick = React.useCallback(({\n    colDef\n  }, event) => {\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(colDef, undefined, allowMultipleSorting);\n  }, [sortColumn]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    colDef\n  }, event) => {\n    // CTRL + Enter opens the column menu\n    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {\n      sortColumn(colDef, undefined, event.shiftKey);\n    }\n  }, [sortColumn]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderClick, handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js"],"names":["_extends","React","GridEvents","GridFeatureModeConstant","isEnterKey","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridColumnLookupSelector","gridSortedRowEntriesSelector","gridSortedRowIdsSelector","gridSortModelSelector","gridRowIdsSelector","gridRowTreeSelector","useFirstRender","useGridRegisterStrategyProcessor","GRID_DEFAULT_STRATEGY","buildAggregatedSortingApplier","mergeStateWithSortModel","getNextGridSortDirection","sanitizeSortModel","useGridRegisterPipeProcessor","sortingStateInitializer","state","props","_ref","_props$sortModel","_props$initialState","_props$initialState$s","sortModel","initialState","sorting","disableMultipleColumnsSorting","sortedRows","useGridSorting","apiRef","logger","current","unstable_updateControlState","stateId","propModel","propOnChange","onSortModelChange","stateSelector","changeEvent","sortModelChange","upsertSortModel","useCallback","field","sortItem","existingIdx","findIndex","c","newSortModel","splice","createSortItem","col","directionOverride","_col$sortingOrder2","existing","find","_col$sortingOrder","nextSort","undefined","sortingOrder","sort","applySorting","setState","sortingMode","server","debug","instanceId","sortRowList","unstable_applyStrategyProcessor","publishEvent","sortedRowsSet","forceUpdate","setSortModel","model","currentModel","sortColumn","column","direction","allowMultipleSorting","sortable","getSortModel","getSortedRows","map","row","getSortedRowIds","getRowIndex","id","indexOf","getRowIdFromRowIndex","index","sortApi","stateExportPreProcessing","prevState","sortModelToExport","length","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","callbacks","flatSortingMethod","rowTree","Object","values","handleColumnHeaderClick","colDef","event","shiftKey","metaKey","ctrlKey","handleColumnHeaderKeyDown","key","handleColumnsChange","latestColumns","newModel","filter","handleStrategyProcessorChange","methodName","columnHeaderClick","columnHeaderKeyDown","rowsSet","columnsChange","activeStrategyProcessorChange","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { isEnterKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { gridRowIdsSelector, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const sortingStateInitializer = (state, props) => {\n  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;\n\n  const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\n\nexport const useGridSorting = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: GridEvents.sortModelChange\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n\n    if (existingIdx > -1) {\n      if (!sortItem) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    var _col$sortingOrder2;\n\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n\n    if (existing) {\n      var _col$sortingOrder;\n\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort == null ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  /**\n   * API METHODS\n   */\n\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === GridFeatureModeConstant.server) {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: gridRowIdsSelector(state, apiRef.current.instanceId)\n          })\n        });\n      }\n\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.unstable_applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.sortedRowsSet);\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((column, direction, allowMultipleSorting) => {\n    if (!column.sortable) {\n      return;\n    }\n\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = !sortItem ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndex = React.useCallback(id => apiRef.current.getSortedRowIds().indexOf(id), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIndex,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'GridSortApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const sortModelToExport = gridSortModelSelector(apiRef);\n\n    if (sortModelToExport.length === 0) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;\n\n    if (sortModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    if (!params.sortRowList) {\n      return gridRowIdsSelector(apiRef);\n    }\n\n    const rowTree = gridRowTreeSelector(apiRef);\n    return params.sortRowList(Object.values(rowTree));\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnHeaderClick = React.useCallback(({\n    colDef\n  }, event) => {\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(colDef, undefined, allowMultipleSorting);\n  }, [sortColumn]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    colDef\n  }, event) => {\n    // CTRL + Enter opens the column menu\n    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {\n      sortColumn(colDef, undefined, event.shiftKey);\n    }\n  }, [sortColumn]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderClick, handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};"]},"metadata":{},"sourceType":"module"}