{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nexport const preferencePanelStateInitializer = (state, props) => {\n  var _props$initialState$p, _props$initialState;\n\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent(GridEvents.preferencePanelClose, {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, preferencePanelState.openedPanelValue]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.publishEvent(GridEvents.preferencePanelOpen, {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (!preferencePanelToExport.open && !preferencePanelToExport.openedPanelValue) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"names":["_extends","React","GridEvents","useGridApiMethod","useGridLogger","useGridRegisterPipeProcessor","gridPreferencePanelStateSelector","useGridSelector","preferencePanelStateInitializer","state","props","_props$initialState$p","_props$initialState","preferencePanel","initialState","open","useGridPreferencesPanel","apiRef","logger","preferencePanelState","hideTimeout","useRef","immediateTimeout","hidePreferences","useCallback","debug","openedPanelValue","current","publishEvent","preferencePanelClose","setState","forceUpdate","doNotHidePanel","setTimeout","clearTimeout","hidePreferencesDelayed","showPreferences","newValue","preferencePanelOpen","stateExportPreProcessing","prevState","preferencePanelToExport","stateRestorePreProcessing","params","context","stateToRestore","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nimport { useGridSelector } from '../../utils/useGridSelector';\nexport const preferencePanelStateInitializer = (state, props) => {\n  var _props$initialState$p, _props$initialState;\n\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent(GridEvents.preferencePanelClose, {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, preferencePanelState.openedPanelValue]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.publishEvent(GridEvents.preferencePanelOpen, {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (!preferencePanelToExport.open && !preferencePanelToExport.openedPanelValue) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};"]},"metadata":{},"sourceType":"module"}