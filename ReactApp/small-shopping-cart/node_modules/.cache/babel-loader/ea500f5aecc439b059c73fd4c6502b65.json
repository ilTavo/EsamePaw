{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.unstable_requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.unstable_requestPipeProcessorsApplication` is called for the given group.\n */\n\nexport const useGridPipeProcessing = apiRef => {\n  const processorsCache = React.useRef({});\n  const runAppliers = React.useCallback(groupCache => {\n    if (!groupCache) {\n      return;\n    }\n\n    Object.values(groupCache.appliers).forEach(callback => {\n      callback();\n    });\n  }, []);\n  const registerPipeProcessor = React.useCallback((group, id, processor) => {\n    if (!processorsCache.current[group]) {\n      processorsCache.current[group] = {\n        processors: {},\n        appliers: {}\n      };\n    }\n\n    const groupCache = processorsCache.current[group];\n    const oldProcessor = groupCache.processors[id];\n\n    if (oldProcessor !== processor) {\n      groupCache.processors[id] = processor;\n      runAppliers(groupCache);\n    }\n\n    return () => {\n      const _processors = processorsCache.current[group].processors,\n            otherProcessors = _objectWithoutPropertiesLoose(_processors, [id].map(_toPropertyKey));\n\n      processorsCache.current[group].processors = otherProcessors;\n    };\n  }, [runAppliers]);\n  const registerPipeApplier = React.useCallback((group, id, applier) => {\n    if (!processorsCache.current[group]) {\n      processorsCache.current[group] = {\n        processors: {},\n        appliers: {}\n      };\n    }\n\n    processorsCache.current[group].appliers[id] = applier;\n    return () => {\n      const _appliers = processorsCache.current[group].appliers,\n            otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));\n\n      processorsCache.current[group].appliers = otherAppliers;\n    };\n  }, []);\n  const requestPipeProcessorsApplication = React.useCallback(group => {\n    const groupCache = processorsCache.current[group];\n    runAppliers(groupCache);\n  }, [runAppliers]);\n  const applyPipeProcessors = React.useCallback((...args) => {\n    const [group, value, context] = args;\n\n    if (!processorsCache.current[group]) {\n      return value;\n    }\n\n    const preProcessors = Object.values(processorsCache.current[group].processors);\n    return preProcessors.reduce((acc, preProcessor) => {\n      return preProcessor(acc, context);\n    }, value);\n  }, []);\n  const preProcessingApi = {\n    unstable_registerPipeProcessor: registerPipeProcessor,\n    unstable_registerPipeApplier: registerPipeApplier,\n    unstable_requestPipeProcessorsApplication: requestPipeProcessorsApplication,\n    unstable_applyPipeProcessors: applyPipeProcessors\n  };\n  useGridApiMethod(apiRef, preProcessingApi, 'GridPipeProcessingApi');\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js"],"names":["_objectWithoutPropertiesLoose","_toPropertyKey","React","useGridApiMethod","useGridPipeProcessing","apiRef","processorsCache","useRef","runAppliers","useCallback","groupCache","Object","values","appliers","forEach","callback","registerPipeProcessor","group","id","processor","current","processors","oldProcessor","_processors","otherProcessors","map","registerPipeApplier","applier","_appliers","otherAppliers","requestPipeProcessorsApplication","applyPipeProcessors","args","value","context","preProcessors","reduce","acc","preProcessor","preProcessingApi","unstable_registerPipeProcessor","unstable_registerPipeApplier","unstable_requestPipeProcessorsApplication","unstable_applyPipeProcessors"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\n\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.unstable_requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.unstable_requestPipeProcessorsApplication` is called for the given group.\n */\nexport const useGridPipeProcessing = apiRef => {\n  const processorsCache = React.useRef({});\n  const runAppliers = React.useCallback(groupCache => {\n    if (!groupCache) {\n      return;\n    }\n\n    Object.values(groupCache.appliers).forEach(callback => {\n      callback();\n    });\n  }, []);\n  const registerPipeProcessor = React.useCallback((group, id, processor) => {\n    if (!processorsCache.current[group]) {\n      processorsCache.current[group] = {\n        processors: {},\n        appliers: {}\n      };\n    }\n\n    const groupCache = processorsCache.current[group];\n    const oldProcessor = groupCache.processors[id];\n\n    if (oldProcessor !== processor) {\n      groupCache.processors[id] = processor;\n      runAppliers(groupCache);\n    }\n\n    return () => {\n      const _processors = processorsCache.current[group].processors,\n            otherProcessors = _objectWithoutPropertiesLoose(_processors, [id].map(_toPropertyKey));\n\n      processorsCache.current[group].processors = otherProcessors;\n    };\n  }, [runAppliers]);\n  const registerPipeApplier = React.useCallback((group, id, applier) => {\n    if (!processorsCache.current[group]) {\n      processorsCache.current[group] = {\n        processors: {},\n        appliers: {}\n      };\n    }\n\n    processorsCache.current[group].appliers[id] = applier;\n    return () => {\n      const _appliers = processorsCache.current[group].appliers,\n            otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));\n\n      processorsCache.current[group].appliers = otherAppliers;\n    };\n  }, []);\n  const requestPipeProcessorsApplication = React.useCallback(group => {\n    const groupCache = processorsCache.current[group];\n    runAppliers(groupCache);\n  }, [runAppliers]);\n  const applyPipeProcessors = React.useCallback((...args) => {\n    const [group, value, context] = args;\n\n    if (!processorsCache.current[group]) {\n      return value;\n    }\n\n    const preProcessors = Object.values(processorsCache.current[group].processors);\n    return preProcessors.reduce((acc, preProcessor) => {\n      return preProcessor(acc, context);\n    }, value);\n  }, []);\n  const preProcessingApi = {\n    unstable_registerPipeProcessor: registerPipeProcessor,\n    unstable_registerPipeApplier: registerPipeApplier,\n    unstable_requestPipeProcessorsApplication: requestPipeProcessorsApplication,\n    unstable_applyPipeProcessors: applyPipeProcessors\n  };\n  useGridApiMethod(apiRef, preProcessingApi, 'GridPipeProcessingApi');\n};"]},"metadata":{},"sourceType":"module"}