{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getIndexFromScroll(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n      const row = currentPage.rows[i];\n      renderedRows.push(row);\n      apiRef.current.unstable_calculateColSpan({\n        rowId: row.id,\n        minFirstColumn,\n        maxLastColumn\n      });\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","GridEvents","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","getIndexFromScroll","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","useGridVirtualScroller","props","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","computeRenderContext","useCallback","firstRowIndex","lastRowIndex","rows","firstColumnIndex","lastColumnIndex","current","autoHeight","clientHeight","useEffect","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","resize","updateRenderZonePosition","nextRenderContext","firstRowToRender","lastRowToRender","rowBuffer","initialFirstColumnToRender","columnBuffer","firstColumnToRender","visibleRows","state","useLayoutEffect","updateRenderContext","initialRenderContext","params","publishEvent","rowsScroll","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","getRows","minFirstColumn","maxLastColumn","availableSpace","range","renderedRows","i","row","push","unstable_calculateColSpan","rowId","id","lastColumnToRender","renderedColumns","slice","_rootProps$components","model","lastVisibleRowIndex","targetRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","getRowParams","components","Row","selected","index","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","max","shouldExtendContent","size","width","minHeight","virtualScrollerContentSizeChange","rootStyle","overflowX","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","getContentProps","getRenderZoneProps"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getIndexFromScroll(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    const firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    const lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext]);\n  React.useEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth\n    } = params;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n      const row = currentPage.rows[i];\n      renderedRows.push(row);\n      apiRef.current.unstable_calculateColSpan({\n        rowId: row.id,\n        minFirstColumn,\n        maxLastColumn\n      });\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}