{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"hasFocus\", \"getValue\", \"isValidating\", \"debounceMs\", \"isProcessingProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridLoadIcon } from '../icons/index';\nimport { SUBMIT_FILTER_STROKE_TIME } from '../panel/filterPanel/GridFilterInputValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editInputCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridEditInputCellRoot = styled(InputBase, {\n  name: 'MuiDataGrid',\n  slot: 'EditInputCell',\n  overridesResolver: (props, styles) => styles.editInputCell\n})(({\n  theme\n}) => _extends({}, theme.typography.body2, {\n  padding: '1px 0',\n  '& input': {\n    padding: '0 16px',\n    height: '100%'\n  }\n}));\n\nfunction GridEditInputCell(props) {\n  var _rootProps$experiment;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    id,\n    value,\n    api,\n    field,\n    colDef,\n    hasFocus,\n    debounceMs = (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi ? 200 : SUBMIT_FILTER_STROKE_TIME,\n    isProcessingProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputRef = React.useRef();\n  const [valueState, setValueState] = React.useState(value);\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(event => {\n    const newValue = event.target.value;\n    setValueState(newValue);\n    api.setEditCellValue({\n      id,\n      field,\n      value: newValue,\n      debounceMs\n    }, event);\n  }, [api, debounceMs, field, id]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(GridEditInputCellRoot, _extends({\n    inputRef: inputRef,\n    className: classes.root,\n    fullWidth: true,\n    type: colDef.type === 'number' ? colDef.type : 'text',\n    value: valueState != null ? valueState : '',\n    onChange: handleChange,\n    endAdornment: isProcessingProps ? /*#__PURE__*/_jsx(GridLoadIcon, {}) : undefined\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditInputCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  debounceMs: PropTypes.number,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired\n} : void 0;\nexport { GridEditInputCell };\nexport const renderEditInputCell = params => /*#__PURE__*/_jsx(GridEditInputCell, _extends({}, params));","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","unstable_composeClasses","composeClasses","unstable_useEnhancedEffect","useEnhancedEffect","styled","InputBase","getDataGridUtilityClass","useGridRootProps","GridLoadIcon","SUBMIT_FILTER_STROKE_TIME","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridEditInputCellRoot","name","slot","overridesResolver","props","styles","editInputCell","theme","typography","body2","padding","height","GridEditInputCell","_rootProps$experiment","rootProps","id","value","api","field","colDef","hasFocus","debounceMs","experimentalFeatures","newEditingApi","isProcessingProps","other","inputRef","useRef","valueState","setValueState","useState","handleChange","useCallback","event","newValue","target","setEditCellValue","useEffect","current","focus","className","fullWidth","type","onChange","endAdornment","undefined","process","env","NODE_ENV","propTypes","any","isRequired","cellMode","oneOf","object","number","string","formattedValue","getValue","func","bool","oneOfType","isEditable","isValidating","row","rowNode","renderEditInputCell","params"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"hasFocus\", \"getValue\", \"isValidating\", \"debounceMs\", \"isProcessingProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridLoadIcon } from '../icons/index';\nimport { SUBMIT_FILTER_STROKE_TIME } from '../panel/filterPanel/GridFilterInputValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editInputCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridEditInputCellRoot = styled(InputBase, {\n  name: 'MuiDataGrid',\n  slot: 'EditInputCell',\n  overridesResolver: (props, styles) => styles.editInputCell\n})(({\n  theme\n}) => _extends({}, theme.typography.body2, {\n  padding: '1px 0',\n  '& input': {\n    padding: '0 16px',\n    height: '100%'\n  }\n}));\n\nfunction GridEditInputCell(props) {\n  var _rootProps$experiment;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    id,\n    value,\n    api,\n    field,\n    colDef,\n    hasFocus,\n    debounceMs = (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi ? 200 : SUBMIT_FILTER_STROKE_TIME,\n    isProcessingProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputRef = React.useRef();\n  const [valueState, setValueState] = React.useState(value);\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(event => {\n    const newValue = event.target.value;\n    setValueState(newValue);\n    api.setEditCellValue({\n      id,\n      field,\n      value: newValue,\n      debounceMs\n    }, event);\n  }, [api, debounceMs, field, id]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(GridEditInputCellRoot, _extends({\n    inputRef: inputRef,\n    className: classes.root,\n    fullWidth: true,\n    type: colDef.type === 'number' ? colDef.type : 'text',\n    value: valueState != null ? valueState : '',\n    onChange: handleChange,\n    endAdornment: isProcessingProps ? /*#__PURE__*/_jsx(GridLoadIcon, {}) : undefined\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditInputCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  debounceMs: PropTypes.number,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired\n} : void 0;\nexport { GridEditInputCell };\nexport const renderEditInputCell = params => /*#__PURE__*/_jsx(GridEditInputCell, _extends({}, params));"]},"metadata":{},"sourceType":"module"}