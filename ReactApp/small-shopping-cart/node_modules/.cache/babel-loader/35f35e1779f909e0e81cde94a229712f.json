{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot } from '../components';\nimport { GridContextProvider } from '../context/GridContextProvider';\nimport { useDataGridComponent } from './useDataGridComponent';\nimport { useDataGridProps, MAX_PAGE_SIZE } from './useDataGridProps';\nimport { DataGridVirtualScroller } from '../components/DataGridVirtualScroller';\nimport { DataGridColumnHeaders } from '../components/DataGridColumnHeaders';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const apiRef = useDataGridComponent(props);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridColumnHeaders,\n          VirtualScrollerComponent: DataGridVirtualScroller\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: chainPropTypes(PropTypes.array.isRequired, props => {\n    // @ts-ignore because otherwise `build:api` doesn't work\n    if (props.columns && props.columns.some(column => column.resizable)) {\n      return new Error([`MUI: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or'])\n  }),\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGrid.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"debug\"\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @internal\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: chainPropTypes(PropTypes.number, props => {\n    if (props.pageSize && props.pageSize > MAX_PAGE_SIZE) {\n      return new Error([`MUI: \\`<DataGrid pageSize={${props.pageSize}} />\\` is not a valid prop.`, `Only page size below ${MAX_PAGE_SIZE} is available in the MIT version.`, '', 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    }\n\n    return null;\n  }),\n  pagination: props => {\n    if (props.pagination === false) {\n      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to the DataGridPro component to disable the pagination.'].join('\\n'));\n    }\n\n    return null;\n  },\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.array.isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: chainPropTypes(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]), props => {\n    if (!props.checkboxSelection && Array.isArray(props.selectionModel) && props.selectionModel.length > 1) {\n      return new Error([`MUI: \\`<DataGrid selectionModel={${JSON.stringify(props.selectionModel)}} />\\` is not a valid prop.`, 'selectionModel can only be of 1 item in DataGrid.', '', 'You need to upgrade to the DataGridPro component to unlock multiple selection.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/DataGrid/DataGrid.js"],"names":["React","PropTypes","chainPropTypes","GridBody","GridErrorHandler","GridFooterPlaceholder","GridHeaderPlaceholder","GridRoot","GridContextProvider","useDataGridComponent","useDataGridProps","MAX_PAGE_SIZE","DataGridVirtualScroller","DataGridColumnHeaders","jsx","_jsx","jsxs","_jsxs","DataGridRaw","forwardRef","DataGrid","inProps","ref","props","apiRef","children","className","style","sx","ColumnHeadersComponent","VirtualScrollerComponent","memo","propTypes","string","autoHeight","bool","autoPageSize","checkboxSelection","classes","object","columnBuffer","number","columns","array","isRequired","some","column","resizable","Error","join","columnThreshold","columnTypes","columnVisibilityModel","components","componentsProps","density","oneOf","disableColumnFilter","disableColumnMenu","disableColumnSelector","disableDensitySelector","disableExtendRowFullWidth","disableSelectionOnClick","disableVirtualization","editMode","editRowsModel","error","any","experimentalFeatures","shape","newEditingApi","preventCommitWhileValidating","warnIfFocusStateIsNotSynced","filterMode","filterModel","items","arrayOf","columnField","id","oneOfType","operatorValue","value","linkOperator","getCellClassName","func","getDetailPanelContent","getRowClassName","getRowHeight","getRowId","getRowSpacing","headerHeight","hideFooter","hideFooterPagination","hideFooterSelectedRowCount","initialState","isCellEditable","isRowSelectable","loading","localeText","logger","debug","info","warn","logLevel","nonce","onCellClick","onCellDoubleClick","onCellEditCommit","onCellEditStart","onCellEditStop","onCellFocusOut","onCellKeyDown","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnVisibilityChange","onColumnVisibilityModelChange","onEditCellPropsChange","onEditRowsModelChange","onError","onFilterModelChange","onPageChange","onPageSizeChange","onPreferencePanelClose","onPreferencePanelOpen","onProcessRowUpdateError","onResize","onRowClick","onRowDoubleClick","onRowEditCommit","onRowEditStart","onRowEditStop","onSelectionModelChange","onSortModelChange","onStateChange","page","pageSize","pagination","paginationMode","processRowUpdate","rowBuffer","rowCount","rowHeight","rows","rowSpacingType","rowsPerPageOptions","rowThreshold","scrollbarSize","selectionModel","Array","isArray","length","JSON","stringify","showCellRightBorder","showColumnRightBorder","sortingMode","sortingOrder","sortModel","field","sort"],"mappings":"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A5UJ;;AA8UtB;AACF;AACA;AACA;AACA;AACA;AACE0B,EAAAA,cAAc,EAAE7G,SAAS,CAACmF,IApVJ;;AAsVtB;AACF;AACA;AACA;AACA;AACA;AACE2B,EAAAA,aAAa,EAAE9G,SAAS,CAACmF,IA5VH;;AA8VtB;AACF;AACA;AACA;AACA;AACA;AACE4B,EAAAA,mBAAmB,EAAE/G,SAAS,CAACmF,IApWT;;AAsWtB;AACF;AACA;AACA;AACA;AACA;AACE6B,EAAAA,yBAAyB,EAAEhH,SAAS,CAACmF,IA5Wf;;AA8WtB;AACF;AACA;AACA;AACA;AACA;AACE8B,EAAAA,mBAAmB,EAAEjH,SAAS,CAACmF,IApXT;;AAsXtB;AACF;AACA;AACA;AACA;AACA;AACE+B,EAAAA,mBAAmB,EAAElH,SAAS,CAACmF,IA5XT;;AA8XtB;AACF;AACA;AACA;AACA;AACA;AACEgC,EAAAA,iBAAiB,EAAEnH,SAAS,CAACmF,IApYP;;AAsYtB;AACF;AACA;AACA;AACA;AACA;AACEiC,EAAAA,kBAAkB,EAAEpH,SAAS,CAACmF,IA5YR;;AA8YtB;AACF;AACA;AACA;AACA;AACA;AACEkC,EAAAA,mBAAmB,EAAErH,SAAS,CAACmF,IApZT;;AAsZtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEmC,EAAAA,wBAAwB,EAAEtH,SAAS,CAACmF,IA9Zd;;AAgatB;AACF;AACA;AACA;AACA;AACEoC,EAAAA,6BAA6B,EAAEvH,SAAS,CAACmF,IAranB;;AAuatB;AACF;AACA;AACA;AACA;AACA;AACA;AACEqC,EAAAA,qBAAqB,EAAExH,SAAS,CAACmF,IA9aX;;AAgbtB;AACF;AACA;AACA;AACA;AACEsC,EAAAA,qBAAqB,EAAEzH,SAAS,CAACmF,IArbX;;AAubtB;AACF;AACA;AACA;AACA;AACA;AACEuC,EAAAA,OAAO,EAAE1H,SAAS,CAACmF,IA7bG;;AA+btB;AACF;AACA;AACA;AACA;AACEwC,EAAAA,mBAAmB,EAAE3H,SAAS,CAACmF,IApcT;;AAsctB;AACF;AACA;AACA;AACA;AA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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot } from '../components';\nimport { GridContextProvider } from '../context/GridContextProvider';\nimport { useDataGridComponent } from './useDataGridComponent';\nimport { useDataGridProps, MAX_PAGE_SIZE } from './useDataGridProps';\nimport { DataGridVirtualScroller } from '../components/DataGridVirtualScroller';\nimport { DataGridColumnHeaders } from '../components/DataGridColumnHeaders';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const apiRef = useDataGridComponent(props);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridColumnHeaders,\n          VirtualScrollerComponent: DataGridVirtualScroller\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: chainPropTypes(PropTypes.array.isRequired, props => {\n    // @ts-ignore because otherwise `build:api` doesn't work\n    if (props.columns && props.columns.some(column => column.resizable)) {\n      return new Error([`MUI: \\`column.resizable = true\\` is not a valid prop.`, 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or'])\n  }),\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGrid.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"debug\"\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @internal\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: chainPropTypes(PropTypes.number, props => {\n    if (props.pageSize && props.pageSize > MAX_PAGE_SIZE) {\n      return new Error([`MUI: \\`<DataGrid pageSize={${props.pageSize}} />\\` is not a valid prop.`, `Only page size below ${MAX_PAGE_SIZE} is available in the MIT version.`, '', 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    }\n\n    return null;\n  }),\n  pagination: props => {\n    if (props.pagination === false) {\n      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to the DataGridPro component to disable the pagination.'].join('\\n'));\n    }\n\n    return null;\n  },\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.array.isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: chainPropTypes(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]), props => {\n    if (!props.checkboxSelection && Array.isArray(props.selectionModel) && props.selectionModel.length > 1) {\n      return new Error([`MUI: \\`<DataGrid selectionModel={${JSON.stringify(props.selectionModel)}} />\\` is not a valid prop.`, 'selectionModel can only be of 1 item in DataGrid.', '', 'You need to upgrade to the DataGridPro component to unlock multiple selection.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n};"]},"metadata":{},"sourceType":"module"}