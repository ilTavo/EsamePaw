{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { MenuUnstyledContext } from '../MenuUnstyled';\nimport { useButton } from '../ButtonUnstyled';\nexport default function useMenuItem(props) {\n  const {\n    component,\n    disabled = false,\n    ref\n  } = props;\n  const id = useId();\n  const menuContext = React.useContext(MenuUnstyledContext);\n  const itemRef = React.useRef(null);\n  const handleRef = useForkRef(itemRef, ref);\n\n  if (menuContext === null) {\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\n  }\n\n  const {\n    registerItem,\n    unregisterItem,\n    open\n  } = menuContext;\n  React.useEffect(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n\n    registerItem(id, {\n      disabled,\n      id,\n      ref: itemRef\n    });\n    return () => unregisterItem(id);\n  }, [id, registerItem, unregisterItem, disabled, ref]);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible\n  } = useButton({\n    component,\n    ref: handleRef,\n    disabled\n  }); // Ensure the menu item is focused when highlighted\n\n  const [focusRequested, requestFocus] = React.useState(false);\n  const focusIfRequested = React.useCallback(() => {\n    if (focusRequested && itemRef.current != null) {\n      itemRef.current.focus();\n      requestFocus(false);\n    }\n  }, [focusRequested]);\n  React.useEffect(() => {\n    focusIfRequested();\n  });\n  React.useDebugValue({\n    id,\n    disabled\n  });\n  const itemState = menuContext.getItemState(id != null ? id : '');\n  const {\n    highlighted\n  } = itemState != null ? itemState : {\n    highlighted: false\n  };\n  React.useEffect(() => {\n    requestFocus(highlighted && open);\n  }, [highlighted, open]);\n\n  if (id === undefined) {\n    return {\n      getRootProps: other => _extends({}, other, getButtonProps(other), {\n        role: 'menuitem'\n      }),\n      itemState: null,\n      focusVisible\n    };\n  }\n\n  return {\n    getRootProps: other => {\n      const optionProps = menuContext.getItemProps(id, other);\n      return _extends({}, other, getButtonProps(other), {\n        tabIndex: optionProps.tabIndex,\n        id: optionProps.id,\n        role: 'menuitem'\n      });\n    },\n    itemState,\n    focusVisible\n  };\n}","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/small-shopping-cart/node_modules/@mui/base/MenuItemUnstyled/useMenuItem.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","MenuUnstyledContext","useButton","useMenuItem","props","component","disabled","ref","id","menuContext","useContext","itemRef","useRef","handleRef","Error","registerItem","unregisterItem","open","useEffect","undefined","getRootProps","getButtonProps","focusVisible","focusRequested","requestFocus","useState","focusIfRequested","useCallback","current","focus","useDebugValue","itemState","getItemState","highlighted","other","role","optionProps","getItemProps","tabIndex"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport { MenuUnstyledContext } from '../MenuUnstyled';\r\nimport { useButton } from '../ButtonUnstyled';\r\nexport default function useMenuItem(props) {\r\n  const {\r\n    component,\r\n    disabled = false,\r\n    ref\r\n  } = props;\r\n  const id = useId();\r\n  const menuContext = React.useContext(MenuUnstyledContext);\r\n  const itemRef = React.useRef(null);\r\n  const handleRef = useForkRef(itemRef, ref);\r\n\r\n  if (menuContext === null) {\r\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\r\n  }\r\n\r\n  const {\r\n    registerItem,\r\n    unregisterItem,\r\n    open\r\n  } = menuContext;\r\n  React.useEffect(() => {\r\n    if (id === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    registerItem(id, {\r\n      disabled,\r\n      id,\r\n      ref: itemRef\r\n    });\r\n    return () => unregisterItem(id);\r\n  }, [id, registerItem, unregisterItem, disabled, ref]);\r\n  const {\r\n    getRootProps: getButtonProps,\r\n    focusVisible\r\n  } = useButton({\r\n    component,\r\n    ref: handleRef,\r\n    disabled\r\n  }); // Ensure the menu item is focused when highlighted\r\n\r\n  const [focusRequested, requestFocus] = React.useState(false);\r\n  const focusIfRequested = React.useCallback(() => {\r\n    if (focusRequested && itemRef.current != null) {\r\n      itemRef.current.focus();\r\n      requestFocus(false);\r\n    }\r\n  }, [focusRequested]);\r\n  React.useEffect(() => {\r\n    focusIfRequested();\r\n  });\r\n  React.useDebugValue({\r\n    id,\r\n    disabled\r\n  });\r\n  const itemState = menuContext.getItemState(id != null ? id : '');\r\n  const {\r\n    highlighted\r\n  } = itemState != null ? itemState : {\r\n    highlighted: false\r\n  };\r\n  React.useEffect(() => {\r\n    requestFocus(highlighted && open);\r\n  }, [highlighted, open]);\r\n\r\n  if (id === undefined) {\r\n    return {\r\n      getRootProps: other => _extends({}, other, getButtonProps(other), {\r\n        role: 'menuitem'\r\n      }),\r\n      itemState: null,\r\n      focusVisible\r\n    };\r\n  }\r\n\r\n  return {\r\n    getRootProps: other => {\r\n      const optionProps = menuContext.getItemProps(id, other);\r\n      return _extends({}, other, getButtonProps(other), {\r\n        tabIndex: optionProps.tabIndex,\r\n        id: optionProps.id,\r\n        role: 'menuitem'\r\n      });\r\n    },\r\n    itemState,\r\n    focusVisible\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}