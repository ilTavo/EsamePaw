{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startCellEditMode(params);\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStart, runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStop, runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    const newProps = {\n      value: apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteFieldState(id, field, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js"],"names":["_extends","React","useGridApiEventHandler","useGridApiOptionHandler","GridEvents","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","processRowUpdate","onProcessRowUpdateError","runIfEditModeIsCell","callback","args","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","cellEditStart","handleCellFocusOut","View","cellFocusOut","cellEditStop","handleCellKeyDown","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleCellEditStart","startCellEditMode","setEditCellValue","value","handleCellEditStop","cellToFocusAfter","ignoreModifications","editingState","state","isProcessingProps","stopCellEditMode","cellKeyDown","onCellEditStart","onCellEditStop","isEditing","updateOrDeleteFieldState","newProps","setState","newEditingState","editRows","Object","keys","length","forceUpdate","getCellValue","error","setCellFocus","unstable_runPendingEditCellValueMutation","updateFocusedCellIfNeeded","unstable_moveFocusToRelativeCell","rowUpdate","unstable_getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","hasChanged","getRowWithUpdatedValuesFromCellEditing","valueSetter","editingApi","unstable_setCellEditingEditCellValue"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startCellEditMode(params);\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStart, runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStop, runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    const newProps = {\n      value: apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteFieldState(id, field, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};"]},"metadata":{},"sourceType":"module"}