{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridCellEditing } from './useGridCellEditing.new';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { useGridRowEditing } from './useGridRowEditing.new';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\nexport const useGridEditing = (apiRef, props) => {\n  useGridCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  const {\n    isCellEditable: isCellEditableProp\n  } = props;\n  const isCellEditable = React.useCallback(params => {\n    if (params.rowNode.isAutoGenerated) {\n      return false;\n    }\n\n    if (!params.colDef.editable) {\n      return false;\n    }\n\n    if (!params.colDef.renderEditCell) {\n      return false;\n    }\n\n    if (isCellEditableProp) {\n      return isCellEditableProp(params);\n    }\n\n    return true;\n  }, [isCellEditableProp]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    } // To run the callback immediatelly without waiting the timeout\n\n\n    const runImmediately = () => {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      callback();\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, runImmediately];\n  };\n\n  React.useEffect(() => {\n    const debounces = debounceMap.current;\n    return () => {\n      Object.entries(debounces).forEach(([id, fields]) => {\n        Object.keys(fields).forEach(field => {\n          const [timeout] = debounces[id][field];\n          clearTimeout(timeout);\n          delete debounces[id][field];\n        });\n      });\n    };\n  }, []);\n  const runPendingEditCellValueMutation = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, runCallback] = debounceMap.current[id][debouncedField];\n        runCallback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, runCallback] = debounceMap.current[id][field];\n      runCallback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      debounceMs\n    } = params;\n    return new Promise(resolve => {\n      maybeDebounce(id, field, debounceMs, async () => {\n        const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue; // Check if the cell is in edit mode\n        // By the time this callback runs the user may have cancelled the editing\n\n        if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n          const result = await setEditCellValueToCall(params);\n          resolve(result);\n        }\n      });\n    });\n  }, [apiRef, props.editMode]);\n  const getRowWithUpdatedValues = React.useCallback((id, field) => {\n    return props.editMode === GridEditModes.Cell ? apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n  }, [apiRef, props.editMode]);\n  const editingSharedApi = {\n    isCellEditable,\n    setEditCellValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation,\n    unstable_getRowWithUpdatedValues: getRowWithUpdatedValues\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditingApi');\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridEditing.new.js"],"names":["_extends","React","useGridApiMethod","useGridCellEditing","GridCellModes","GridEditModes","useGridRowEditing","editingStateInitializer","state","editRows","useGridEditing","apiRef","props","debounceMap","useRef","isCellEditable","isCellEditableProp","useCallback","params","rowNode","isAutoGenerated","colDef","editable","renderEditCell","maybeDebounce","id","field","debounceMs","callback","current","timeout","clearTimeout","runImmediately","setTimeout","useEffect","debounces","Object","entries","forEach","fields","keys","runPendingEditCellValueMutation","debouncedField","runCallback","setEditCellValue","Promise","resolve","setEditCellValueToCall","editMode","Row","unstable_setRowEditingEditCellValue","unstable_setCellEditingEditCellValue","getCellMode","Edit","result","getRowWithUpdatedValues","Cell","unstable_getRowWithUpdatedValuesFromCellEditing","unstable_getRowWithUpdatedValuesFromRowEditing","editingSharedApi","unstable_runPendingEditCellValueMutation","unstable_getRowWithUpdatedValues"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,OAAO,MAAMC,uBAAuB,GAAGC,KAAK,IAAIR,QAAQ,CAAC,EAAD,EAAKQ,KAAL,EAAY;AAClEC,EAAAA,QAAQ,EAAE;AADwD,CAAZ,CAAjD;AAGP,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC/CT,EAAAA,kBAAkB,CAACQ,MAAD,EAASC,KAAT,CAAlB;AACAN,EAAAA,iBAAiB,CAACK,MAAD,EAASC,KAAT,CAAjB;AACA,QAAMC,WAAW,GAAGZ,KAAK,CAACa,MAAN,CAAa,EAAb,CAApB;AACA,QAAM;AACJC,IAAAA,cAAc,EAAEC;AADZ,MAEFJ,KAFJ;AAGA,QAAMG,cAAc,GAAGd,KAAK,CAACgB,WAAN,CAAkBC,MAAM,IAAI;AACjD,QAAIA,MAAM,CAACC,OAAP,CAAeC,eAAnB,EAAoC;AAClC,aAAO,KAAP;AACD;;AAED,QAAI,CAACF,MAAM,CAACG,MAAP,CAAcC,QAAnB,EAA6B;AAC3B,aAAO,KAAP;AACD;;AAED,QAAI,CAACJ,MAAM,CAACG,MAAP,CAAcE,cAAnB,EAAmC;AACjC,aAAO,KAAP;AACD;;AAED,QAAIP,kBAAJ,EAAwB;AACtB,aAAOA,kBAAkB,CAACE,MAAD,CAAzB;AACD;;AAED,WAAO,IAAP;AACD,GAlBsB,EAkBpB,CAACF,kBAAD,CAlBoB,CAAvB;;AAoBA,QAAMQ,aAAa,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,UAAZ,EAAwBC,QAAxB,KAAqC;AACzD,QAAI,CAACD,UAAL,EAAiB;AACfC,MAAAA,QAAQ;AACR;AACD;;AAED,QAAI,CAACf,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,CAAL,EAA8B;AAC5BZ,MAAAA,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,IAA0B,EAA1B;AACD;;AAED,QAAIZ,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAJ,EAAoC;AAClC,YAAM,CAACI,OAAD,IAAYjB,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAlB;AACAK,MAAAA,YAAY,CAACD,OAAD,CAAZ;AACD,KAbwD,CAavD;;;AAGF,UAAME,cAAc,GAAG,MAAM;AAC3B,YAAM,CAACF,OAAD,IAAYjB,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAlB;AACAK,MAAAA,YAAY,CAACD,OAAD,CAAZ;AACAF,MAAAA,QAAQ;AACR,aAAOf,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAP;AACD,KALD;;AAOA,UAAMI,OAAO,GAAGG,UAAU,CAAC,MAAM;AAC/BL,MAAAA,QAAQ;AACR,aAAOf,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAP;AACD,KAHyB,EAGvBC,UAHuB,CAA1B;AAIAd,IAAAA,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,IAAiC,CAACI,OAAD,EAAUE,cAAV,CAAjC;AACD,GA5BD;;AA8BA/B,EAAAA,KAAK,CAACiC,SAAN,CAAgB,MAAM;AACpB,UAAMC,SAAS,GAAGtB,WAAW,CAACgB,OAA9B;AACA,WAAO,MAAM;AACXO,MAAAA,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,OAA1B,CAAkC,CAAC,CAACb,EAAD,EAAKc,MAAL,CAAD,KAAkB;AAClDH,QAAAA,MAAM,CAACI,IAAP,CAAYD,MAAZ,EAAoBD,OAApB,CAA4BZ,KAAK,IAAI;AACnC,gBAAM,CAACI,OAAD,IAAYK,SAAS,CAACV,EAAD,CAAT,CAAcC,KAAd,CAAlB;AACAK,UAAAA,YAAY,CAACD,OAAD,CAAZ;AACA,iBAAOK,SAAS,CAACV,EAAD,CAAT,CAAcC,KAAd,CAAP;AACD,SAJD;AAKD,OAND;AAOD,KARD;AASD,GAXD,EAWG,EAXH;AAYA,QAAMe,+BAA+B,GAAGxC,KAAK,CAACgB,WAAN,CAAkB,CAACQ,EAAD,EAAKC,KAAL,KAAe;AACvE,QAAI,CAACb,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,CAAL,EAA8B;AAC5B;AACD;;AAED,QAAI,CAACC,KAAL,EAAY;AACVU,MAAAA,MAAM,CAACI,IAAP,CAAY3B,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,CAAZ,EAAqCa,OAArC,CAA6CI,cAAc,IAAI;AAC7D,cAAM,GAAGC,WAAH,IAAkB9B,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBiB,cAAxB,CAAxB;AACAC,QAAAA,WAAW;AACZ,OAHD;AAID,KALD,MAKO,IAAI9B,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAJ,EAAoC;AACzC,YAAM,GAAGiB,WAAH,IAAkB9B,WAAW,CAACgB,OAAZ,CAAoBJ,EAApB,EAAwBC,KAAxB,CAAxB;AACAiB,MAAAA,WAAW;AACZ;AACF,GAduC,EAcrC,EAdqC,CAAxC;AAeA,QAAMC,gBAAgB,GAAG3C,KAAK,CAACgB,WAAN,CAAkBC,MAAM,IAAI;AACnD,UAAM;AACJO,MAAAA,EADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA;AAHI,QAIFT,MAJJ;AAKA,WAAO,IAAI2B,OAAJ,CAAYC,OAAO,IAAI;AAC5BtB,MAAAA,aAAa,CAACC,EAAD,EAAKC,KAAL,EAAYC,UAAZ,EAAwB,YAAY;AAC/C,cAAMoB,sBAAsB,GAAGnC,KAAK,CAACoC,QAAN,KAAmB3C,aAAa,CAAC4C,GAAjC,GAAuCtC,MAAM,CAACkB,OAAP,CAAeqB,mCAAtD,GAA4FvC,MAAM,CAACkB,OAAP,CAAesB,oCAA1I,CAD+C,CACiI;AAChL;;AAEA,YAAIxC,MAAM,CAACkB,OAAP,CAAeuB,WAAf,CAA2B3B,EAA3B,EAA+BC,KAA/B,MAA0CtB,aAAa,CAACiD,IAA5D,EAAkE;AAChE,gBAAMC,MAAM,GAAG,MAAMP,sBAAsB,CAAC7B,MAAD,CAA3C;AACA4B,UAAAA,OAAO,CAACQ,MAAD,CAAP;AACD;AACF,OARY,CAAb;AASD,KAVM,CAAP;AAWD,GAjBwB,EAiBtB,CAAC3C,MAAD,EAASC,KAAK,CAACoC,QAAf,CAjBsB,CAAzB;AAkBA,QAAMO,uBAAuB,GAAGtD,KAAK,CAACgB,WAAN,CAAkB,CAACQ,EAAD,EAAKC,KAAL,KAAe;AAC/D,WAAOd,KAAK,CAACoC,QAAN,KAAmB3C,aAAa,CAACmD,IAAjC,GAAwC7C,MAAM,CAACkB,OAAP,CAAe4B,+CAAf,CAA+DhC,EAA/D,EAAmEC,KAAnE,CAAxC,GAAoHf,MAAM,CAACkB,OAAP,CAAe6B,8CAAf,CAA8DjC,EAA9D,CAA3H;AACD,GAF+B,EAE7B,CAACd,MAAD,EAASC,KAAK,CAACoC,QAAf,CAF6B,CAAhC;AAGA,QAAMW,gBAAgB,GAAG;AACvB5C,IAAAA,cADuB;AAEvB6B,IAAAA,gBAFuB;AAGvBgB,IAAAA,wCAAwC,EAAEnB,+BAHnB;AAIvBoB,IAAAA,gCAAgC,EAAEN;AAJX,GAAzB;AAMArD,EAAAA,gBAAgB,CAACS,MAAD,EAASgD,gBAAT,EAA2B,YAA3B,CAAhB;AACD,CAhHM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridCellEditing } from './useGridCellEditing.new';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { useGridRowEditing } from './useGridRowEditing.new';\nexport const editingStateInitializer = state => _extends({}, state, {\n  editRows: {}\n});\nexport const useGridEditing = (apiRef, props) => {\n  useGridCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  const debounceMap = React.useRef({});\n  const {\n    isCellEditable: isCellEditableProp\n  } = props;\n  const isCellEditable = React.useCallback(params => {\n    if (params.rowNode.isAutoGenerated) {\n      return false;\n    }\n\n    if (!params.colDef.editable) {\n      return false;\n    }\n\n    if (!params.colDef.renderEditCell) {\n      return false;\n    }\n\n    if (isCellEditableProp) {\n      return isCellEditableProp(params);\n    }\n\n    return true;\n  }, [isCellEditableProp]);\n\n  const maybeDebounce = (id, field, debounceMs, callback) => {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n    } // To run the callback immediatelly without waiting the timeout\n\n\n    const runImmediately = () => {\n      const [timeout] = debounceMap.current[id][field];\n      clearTimeout(timeout);\n      callback();\n      delete debounceMap.current[id][field];\n    };\n\n    const timeout = setTimeout(() => {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, runImmediately];\n  };\n\n  React.useEffect(() => {\n    const debounces = debounceMap.current;\n    return () => {\n      Object.entries(debounces).forEach(([id, fields]) => {\n        Object.keys(fields).forEach(field => {\n          const [timeout] = debounces[id][field];\n          clearTimeout(timeout);\n          delete debounces[id][field];\n        });\n      });\n    };\n  }, []);\n  const runPendingEditCellValueMutation = React.useCallback((id, field) => {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(debouncedField => {\n        const [, runCallback] = debounceMap.current[id][debouncedField];\n        runCallback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      const [, runCallback] = debounceMap.current[id][field];\n      runCallback();\n    }\n  }, []);\n  const setEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      debounceMs\n    } = params;\n    return new Promise(resolve => {\n      maybeDebounce(id, field, debounceMs, async () => {\n        const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue; // Check if the cell is in edit mode\n        // By the time this callback runs the user may have cancelled the editing\n\n        if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n          const result = await setEditCellValueToCall(params);\n          resolve(result);\n        }\n      });\n    });\n  }, [apiRef, props.editMode]);\n  const getRowWithUpdatedValues = React.useCallback((id, field) => {\n    return props.editMode === GridEditModes.Cell ? apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n  }, [apiRef, props.editMode]);\n  const editingSharedApi = {\n    isCellEditable,\n    setEditCellValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation,\n    unstable_getRowWithUpdatedValues: getRowWithUpdatedValues\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditingApi');\n};"]},"metadata":{},"sourceType":"module"}