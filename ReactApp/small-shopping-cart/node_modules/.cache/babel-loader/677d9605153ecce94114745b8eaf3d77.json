{"ast":null,"code":"import * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   */\n\n  const goToCell = React.useCallback((colIndex, rowIndex, closestColumnToUse = 'left') => {\n    var _visibleSortedRows$ro;\n\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const rowId = (_visibleSortedRows$ro = visibleSortedRows[rowIndex]) == null ? void 0 : _visibleSortedRows$ro.id;\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    logger.debug(`Navigating to cell row ${rowIndex}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!currentPage.range || !dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = visibleSortedRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = currentPage.range.firstRowIndex;\n    const lastRowIndexInPage = currentPage.range.lastRowIndex;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore + 1);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore - 1);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore, 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore, 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore, 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, nextRowIndex);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, firstRowIndexInPage);\n          } else {\n            goToCell(firstColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, lastRowIndexInPage);\n          } else {\n            goToCell(lastColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    var _currentPage$range$fi, _currentPage$range, _currentPage$range$la, _currentPage$range2;\n\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = (_currentPage$range$fi = (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) != null ? _currentPage$range$fi : null;\n    const lastRowIndexInPage = (_currentPage$range$la = (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex) != null ? _currentPage$range$la : null;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, firstRowIndexInPage);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, cellParams, event);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellNavigationKeyDown, handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};","map":{"version":3,"sources":["C:/Users/Valerio/Documents/GitHub/EsamePaw/ReactApp/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"names":["React","GridEvents","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridVisibleSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","useGridKeyboardNavigation","apiRef","props","logger","currentPage","goToCell","useCallback","colIndex","rowIndex","closestColumnToUse","_visibleSortedRows$ro","visibleSortedRows","rowId","id","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","debug","scrollToIndexes","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","handleCellNavigationKeyDown","params","dimensions","getRootDimensions","range","viewportPageSize","unstable_getViewportPageSize","colIndexBefore","getColumnIndex","rowIndexBefore","findIndex","row","firstRowIndexInPage","firstRowIndex","lastRowIndexInPage","lastRowIndex","firstColIndex","lastColIndex","length","shouldPreventDefault","key","shiftKey","colDef","type","Math","min","nextRowIndex","max","ctrlKey","metaKey","preventDefault","handleColumnHeaderKeyDown","_currentPage$range$fi","_currentPage$range","_currentPage$range$la","_currentPage$range2","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","toggleColumnMenu","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","publishEvent","cellNavigationKeyDown","columnHeaderKeyDown","cellKeyDown"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   */\n\n  const goToCell = React.useCallback((colIndex, rowIndex, closestColumnToUse = 'left') => {\n    var _visibleSortedRows$ro;\n\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const rowId = (_visibleSortedRows$ro = visibleSortedRows[rowIndex]) == null ? void 0 : _visibleSortedRows$ro.id;\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    logger.debug(`Navigating to cell row ${rowIndex}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!currentPage.range || !dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = visibleSortedRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = currentPage.range.firstRowIndex;\n    const lastRowIndexInPage = currentPage.range.lastRowIndex;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore + 1);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, rowIndexBefore - 1);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore, 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, rowIndexBefore, 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, rowIndexBefore, 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, nextRowIndex);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, firstRowIndexInPage);\n          } else {\n            goToCell(firstColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, lastRowIndexInPage);\n          } else {\n            goToCell(lastColIndex, rowIndexBefore);\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    var _currentPage$range$fi, _currentPage$range, _currentPage$range$la, _currentPage$range2;\n\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = (_currentPage$range$fi = (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) != null ? _currentPage$range$fi : null;\n    const lastRowIndexInPage = (_currentPage$range$la = (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex) != null ? _currentPage$range$la : null;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, firstRowIndexInPage);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPage, goToCell, goToHeader]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, cellParams, event);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellNavigationKeyDown, handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderKeyDown, handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};"]},"metadata":{},"sourceType":"module"}